{"pages":[],"posts":[{"title":"Hello from zhongzilu","permalink":"http://zhongzilu.github.io/2017/02/20/Hello-from-zhongzilu/","text":"Hello from ZhongziluWelcome to BIT100.I’m zilu Zhong,an Android developer.Here is my blog website.I will post some blog articel which include technology,psychology and other notes in some time.In order to facilitating more people,I will sharing something which is be useful to everyone,because i believe that the knowledge more sharing more valuable.Sorry!My English is poor.So,Don’t be care. 欢迎来到我的网站，我是钟子路(zhongzilu)，是一个安卓开发者。这个网站是我的博客网站，我会不定时更新一些博客，博客类型包括技术博客，心理学笔记以及一些随笔，总之，是把我觉得对大家有用的东西分享出来，以便利更多人。我相信，知识越分享越有价值。 作者：zhongziluGitHub： https://github.com/zhongzilu简书: http://www.jianshu.com/users/0551ca89845b/latest_articles安卓社区: http://ask.android-studio.org/?/people/zhongzilu网易云音乐 http://music.163.com/#/user/home?id=28448237微博 http://weibo.com/2719197280/profile?topnav=1&amp;wvr=6&amp;is_all=1"},{"title":"Hello World","permalink":"http://zhongzilu.github.io/2017/02/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"如何在Android Studio(IntelliJ)中创建Live Templates","permalink":"http://zhongzilu.github.io/2016/05/10/如何在Android-Studio-IntelliJ-中创建Live-Templates/","text":"如何在Android Studio/IntelliJ中创建Live Templates标签： Android Studio IntelliJ Live Template 何为Live Templates? frequently-used or custom code constructs that you can insert into your source code file quickly, efficiently and accurately.快速，高效，准确的将常用或自定义构造代码插入到你的源代码文件中 通俗的讲，就是像快捷键一样，只需要输入几个简写的英文字母就可以快速自动插入一行或多行代码。 在Android Studio/IntelliJ编辑器中，默认使用Ctrl + J快捷键可以调出Live Templates，可以自动补全所设置的模板的代码，善用它能够很大程度上减少开发时间。 举个例子，输入psfi，然后按回车键，编辑器将会自动生成代码public static final int，这就节省了19个要输入的字母。 Android Studio/IntelliJ编辑器中预置了一些常用的Live Templates，大家可以自行去查看，查看位置File ==&gt; Settings ==&gt; Editor ==&gt; Live Templates 如何创建自定义的Live Templates？ 找到Live Templates的位置，然后点击右上角的+号，再选择Template Group，写上一个名称 接着再点击+号，选择Live Template，之后填写相关的内容 举例我用一个快速插入RecyclerView控件代码的例子来举例，设置如下图： 填写相关内容完毕之后 ，注意下方的一行红字，此时定义的Live Template还没生效，需要点击Define，然后选择该Live Template要应用到什么样的场景中。因为这里我定义的是安卓的控件代码，所以就归类为XML 点击OK按钮生效。注意勾选右下角的Reformat according to style选项 要想使用刚才定义的Live Template，只需要在android的XML布局文件中输入rcv，然后按回车键就可以了，如下图所示： 以上就是如何在Android Studio/IntelliJ编辑器中创建Live Template的方法，相信富有创意的各位能够创建出更多的更方便的Live Template，这对于今后的代码编写大有裨益 另外，我在这里推荐一篇博客：http://blog.csdn.net/DesmondJ/article/details/47017205"},{"title":"Wordpress自定义栏目的使用","permalink":"http://zhongzilu.github.io/2016/05/10/Wordpress自定义栏目的使用/","text":"WordPress自定义栏目的使用 前言 最近有个任务，要实现在公司官网上点击某个商品的购买按钮，就跳转到对应的淘宝店页面去。由于公司官网用的WordPress平台，我之前只是听说过，并没有实质性使用过，所以一开始就是一头雾水，再加上网站原本是由外包公司做的，交接时没有任何文档，因此我根本不知如何下手，但最后还是硬着头皮去做了。 我思考着要完成这个任务我需要怎么做，由于网站上的内容都是动态从数据库中取的，所以如果我要实现点击购买按钮就跳转到对应网店的功能，就不可能在代码中把跳转的店铺地址写死了，必须要从数据库中去读取，并且还要和商品关联起来才行。 这其中肯定涉及到把链接地址写入数据库，WordPress提供了一个管理后台，通过管理后台可以把数据写入数据库。 打开后台，找到文章编辑页面，在右上方有个显示选项，展开后可以显示和隐藏模块。勾选自定义栏目 在页面下方可以看到这个模块，在这里可以新增自定义的数据字段，并给它赋值。 拿我的任务来举例，我点击购买按钮之后跳转到对应的商品淘宝店，所以商品淘宝店的地址就需要写入数据库，所以现在新增一个自定义字段，点击输入新栏目 输入自定义名称和值，输入完成后点击添加自定义栏目 添加完之后就是如下图所示 自定义栏目添加成功了，那么问题来了，我们如何取到自定义栏目的值并显示在页面上呢？ 在WordPress中有个get_post_meta()的函数，官方的解释是： This function returns the values of the custom fields with the specified key from the specified post. 翻译过来大概的意思是：该函数用于取出用户设置的自定义字段的值。 用途 该函数的用处很多，很多主题用来设置文章相应图片的设置，这与将远程图像设置为缩略图有异曲同工之妙，当然自定义字段还可以用于存储许多我们觉得更有用的东西，例如统计信息，等等。 用法 &lt;?php $meta_values = get_post_meta($post_id, $key, $single); ?&gt; 参数解释 $post_id文章的ID（如果在循环中，你可以用 get_the_ID()来设置）,$key自定义字段的名称（键值）,$single是否以字符串形式返回，false会返回数组形式。 缺省用法 &lt;?php $value = get_post_meta(76, &#39;key&#39;); ?&gt; 实例12345if (have_posts()) ://如果有文章 while (have_posts()) : the_post(); //开启主循环 $value = get_post_meta(get_the_ID(),'custom_meta',true); endwhile; endif; 上面介绍完get_post_meta()函数，现在我们就来实现我的这个任务。在项目源代码中找到使用的主题的文件夹，我的文件夹位置为：htdocs/wp-content/themes/jitatheme/再找到function.php文件并打开，在这里我们将封装成一个获取地址的函数，代码如下： 12345678/***获取淘宝店铺商品的地址*/function getTB_Url($postID)&#123; $key = &apos;direct_to_tb&apos;; $url = get_post_meta($postID, $key, true); return $url;&#125; 然后找到我们要修改的页面，用一个&lt;a&gt;标签来实现点击跳转。我们在&lt;a&gt;标签的href属性中来调用刚才封装的函数，代码如下：1&lt;a class=&quot;btn&quot; href=&quot;&lt;?php echo getTB_Url(get_the_ID()); ?&gt;&quot; target=&quot;_blank&quot;&gt;点击购买&lt;/a&gt; 最后在页面上点击测试一下，跳转正确，任务完毕。 总结 了解了如何在WordPress后台管理界面添加自定义栏目 了解了如何获取自定义栏目的值和get_post_meta()函数的使用"},{"title":"MVC&MVP模式有何不同","permalink":"http://zhongzilu.github.io/2016/05/10/MVC-MVP模式有何不同/","text":"MVC &amp; MVP模式有何不同标签 : MVP MVC 本文是翻译国外的一篇文章,英语水平有限,翻译有误的地方希望提出来,以方便修改,谢谢 原文传送门: http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx Over the years I have mentored many developers on using design patterns and best practices.多年来我有辅导过很多开发者使用设计模式和最佳实践 One question that keeps coming up over and over again is:What are the differences between the Model View Controller (MVC) and Model View Presenter (MVP) patterns?一遍又一遍出现的一个问题是: 模型 视图 控制器(MVC模式)和模型 视图 主持人(MVP模式)之间有哪些不同? Surprisingly the answer is more complex than what you would suspect.令人惊讶的是答案比你想象中的更复杂 Part of reasons I think many developers shy away from using either pattern is the confusion over the differences.我认为一部分原因是因为许多开发者回避使用两种模式带来的混乱 Before we dig into the differences let’s examine how the patterns work and the key benefits to using either one.在我们深入研究两种模式如何工作和使用其中一种带来的关键利益之前 Both (MVC &amp; MVP) patterns have been use for several years and address a key OO principal namely separation of concerns between the UI and the business layers.这两种模式(MVC &amp; MVP)已经使用了好几年,并且处理面向对象的关键就是分离界面UI层和业务层. There are a number of frameworks is use today that based on these patterns including: JAVA Struts, ROR, Microsoft Smart Client Software Factory (CAB), Microsoft Web Client Software Factory, and the recently announced ASP.Net MVC framework.这里有一些如今正在被使用的,基于这些模式的框架,包括:Java Struts, ROR, Microsoft Smart Client Software Factory (CAB), Microsoft Web Client Software Factory,还有最近发布的ASP.Net MVC框架 Model View Controller (MVC) Pattern The MVC pattern is a UI presentation pattern that focuses on separating the UI (View) from its business layer (Model).MVC模式是一个着重于从业务层(Model)分离UI(View)的UI表示模型 The pattern separates responsibilities across three components: the view is responsible for rending UI elements, the controller is responsible for responding to UI actions, and the model is responsible for business behaviors and state management.模型分离的重任横跨三个组件: 视图层负责渲染UI元素, 控制器负责响应UI操作, 模型层负责业务逻辑和状态管理. In most implementation all three components can directly interact with each other and in some implementations the controller is responsible for determining which view to display (Front Controller Pattern),多数的实现方法，可以使这三个组件互相直接作用影响，有一些实现的方法里，控制器负责确定哪些试图的显示（Front Controller Pattern) Model View Presenter (MVP) Pattern The MVP pattern is a UI presentation pattern based on the concepts of the MVC pattern.MVP模型是基于MVC模型的UI表示模型。 The pattern separates responsibilities across four components: the view is responsible for rending UI elements, the view interface is used to loosely couple the presenter from its view, the presenter is responsible for interacting between the view/model, and the model is responsible for business behaviors and state management.模型分离的重任横跨四个组件:视图层负责渲染UI元素， 视图层接口被用于把中介者（Presenter)从视图中解耦，中介者负责视图（View)和模型(Model)之间的交互,模型层负责业务逻辑和状态管理. In some implementations the presenter interacts with a service (controller) layer to retrieve/persist the model.在某些实现方法中，中介者会和服务层/控制器层交互来获取或持有model。 The view interface and service layer are commonly used to make writing unit tests for the presenter and the model easier.视图接口和服务层通常被用来编写中介者和模型之间的单元测试。 关键优势 Before using any pattern a developers needs to consider the pros and cons of using it.在使用任何开发模式之前，开发人员需要考虑使用它的优点和缺点。 There are a number of key benefits to using either the MVC or MVP pattern (See list below).这里有一些使用MVC和MVP模型的关键好处（请看下面的列表）。 But, there also a few drawbacks to consider. The biggest drawbacks are additional complexity and learning curve.但是，这里也有一些缺点需要考虑。最大的缺点就是它的复杂性和需要付出额外的学习成本。 While the patterns may not be appropriate for simple solutions; advance solutions can greatly benefit from using the pattern.这种模型可能不太适合一般的解决方案；好的解决方案可以从中获得更大的利益。 I’m my experience a have seen a few solutions eliminate a large amount of complexity but being re-factored to use either pattern.在我的经历中，我见过使用这些模式来重构项目，解决了不少的复杂的问题。 Loose coupling – The presenter/controller are an intermediary between the UI code and the model. This allows the view and the model to evolve independently of each other.松散耦合 - presenter或控制器在UI代码和模型之间充当着中间媒介的角色，这就使得视图和控制器之间互相独立。 Clear separation of concerns/responsibility清晰分离关注点和职责（关于concerns的翻译请自行有道）– UI (Form or Page) – Responsible for rending UI elementsUI(表单或页面） - 负责渲染UI元素 – Presenter/controller – Responsible for reacting to UI events and interacts with the model中介者/控制器 - 负责对UI事件与模型进行交互 – Model – Responsible for business behaviors and state management模型 - 负责业务逻辑和状态管理. Test Driven – By isolating each major component (UI, Presenter/controller, and model) it is easier to write unit tests. This is especially true when using the MVP pattern which only interacts with the view using an interface.测试驱动 - 通过分离每个主要组件（UI,Presenter/controller, model)更容易编写单元测试，当使用MVP模型且只通过接口来和视图层交互时，就更应该这样做。 Code Reuse – By using a separation of concerns/responsible design approach you will increase code reuse. This is especially true when using a full blown domain model and keeping all the business/state management logic where it belongs.代码复用 - 通过使用分离关注点和职责的设计可以增加你的代码复用。在使用全面的域模型和保持所属业务和状态管理的逻辑时，就更应该这样做。 Hide Data Access – Using these patterns forces you to put the data access code where it belongs in a data access layer. There a number of other patterns that typical works with the MVP/MVC pattern for data access. Two of the most common ones are repository and unit of work. (See Martin Fowler – Patterns of Enterprise Application Architecture for more details)隐藏数据访问 - 使用这种模式会强迫你使用数据接入层中的数据接入代码。这里有一些其他典型的使用MVP/MVC模型来进行数据访问的模型，最常见的两个就是库和工作单元。（想看更多细节请看Martin Fowler的企业应用架构模式【Martin Fowler - Patterns of Enterprise Application Architecture】) Flexibility/Adaptable – By isolating most of your code into the presenter/controller and model components your code base is more adaptable to change. For example consider how much UI and data access technologies have changed over the years and the number of choices we have available today. A properly design solution using MVC or MVP can support multi UI and data access technologies at the same time.灵活/适用 - 通过分离Presenter/controller和model组件可以使你的代码更灵活适用.举个例子,这些年来有许多UI技术和数据接入技术都有所改变,如今我们有许多的选择.恰当的使用MVC或者MVP模式来设计解决方案,可以同时支持多种UI技术和数据接入技术. 关键区别 So what really are the differences between the MVC and MVP pattern.Actually there are not a whole lot of differences between them.因此,MVC和MVP模式之间真正的区别.其实是没有太多区别. Both patterns focus on separating responsibility across multi components and promote loosely coupling the UI (View) from the business layer (Model).这两者都是专注跨组件分离职责,促进UI层从业务层中解耦. The major differences are how the pattern is implemented and in some advanced scenarios you need both presenters and controllers.主要的区别在于如何实现,在某些高级的应用场景中需要同时有Presenter和Controler Here are the key differences between the patterns:这里有些这两种模式之间的关键区别: MVP模式– View is more loosely coupled to the model. The presenter is responsible for binding the model to the view.视图和模型之间耦合更加松散.中介者负责把model绑定到视图层.– Easier to unit test because interaction with the view is through an interface更加容易编写单元测试,因为都是通过接口和视图交互的.– Usually view to presenter map one to one. Complex views may have multi presenters.通常情况下,视图和中介者是一一对应的.复杂的视图可能会有多个中介者. MVC模式– Controller are based on behaviors and can be shared across views控制器是建立在行为上的,并且可以跨视图共享– Can be responsible for determining which view to display能够负责决定要显示哪个视图 Hopefully you found this post interesting and it helped clarify the differences between the MVC and MVP pattern.希望你会觉得这篇文章是有趣的,这篇文章会帮助你理清MVC和MVP模式之间的区别. If not, do not be discouraged patterns are powerful tools that can be hard to use sometimes.如果没理清,请不要泄气,模型是一个强大的工具,以至于有时在使用时会觉得很困难 One thing to remember is that a pattern is a blue print and not an out of the box solutions.你只需要记住,模型只是一个蓝图,并不是快速的解决方案. Developers should use them as a guide and modify the implementation according to their problem domain.开发者应该把它们作为指导手册,并根据遇到的问题修正实现方案. 作者 :zhongzilu"},{"title":"Android开发之MVP初体验","permalink":"http://zhongzilu.github.io/2016/05/10/Android开发之MVP初体验/","text":"Android开发 MVP之初体验标签 ：Android MVP MVC 熟悉安卓开发的童鞋应该都熟悉MVC架构模式, MVC开发模式即: Model(模型) – View(视图) – Control(控制器) 逻辑图如下: 而这种开发模式有个缺点,就是在项目越来越大时,文件会越来越多,查找起来很不方便,而且Activity或者Fragment里面的代码会越来越臃肿,看起来很凌乱,要修改更是让人头疼,于是就提出了一种MVP的开发模式,MVP开发模式即: Model(模型) – View(视图) – Presente(任命者/中介) 逻辑图如下: 网上有很多讲解MVP的文章和教程,我这里就不详细介绍了,但还有很多人看过教程之后依然不知如何实现MVP,今天主要通过实际代码的方式来体验MVP开发 本次使用的代码为Github上的一个开源项目,名为androidmvp 传送门 https://github.com/antoniolg/androidmvp 先看看界面界面很简单,就是一个登录界面和一个ListView填充的主界面,登录之后跳转到主界面,主界面上显示一个列表 第一步用Android Studio打开项目之后可以看到如下的项目结构 通过截图可以看出,该项目是根据界面来分类的,Login文件夹下放的是所有与登录界面有关的文件,main文件夹下放的是所有与主界面有关的文件 其中, Login文件夹下共有6个文件, 3个类文件, 3个接口文件 类文件: LoginActivity LoginInteratorImpl LoginPresenterImpl 接口文件: LoginView LoginInteractor LoginPresenter 第二步打开LoginActivity.java文件123456789101112131415161718public class LoginActivity extends Activity implements LoginView, View.OnClickListener &#123; private ProgressBar progressBar; private EditText username; private EditText password; private LoginPresenter presenter; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); //实例化控件 ... presenter = new LoginPresenterImpl(this); &#125; ... 从上面代码可以看出,该Activity实现了LoginView的接口和View的点击事件, 并且实例化了一个LoginPresenterImpl对象 现在打开LoginView.java 1234567891011public interface LoginView &#123; void showProgress(); void hideProgress(); void setUsernameError(); void setPasswordError(); void navigateToHome();&#125; 可以看到LoginView文件中定义了几个接口, 通过名称可以很容易知道每个接口是用来干什么的返回LoginActivity也很容易发现是如何实现这几个接口的,如下:1234567891011121314151617181920Override public void showProgress() &#123; progressBar.setVisibility(View.VISIBLE);&#125;Override public void hideProgress() &#123; progressBar.setVisibility(View.GONE);&#125;Override public void setUsernameError() &#123; username.setError(getString(R.string.username_error));&#125;Override public void setPasswordError() &#123; password.setError(getString(R.string.password_error));&#125;@Override public void navigateToHome() &#123; startActivity(new Intent(this, MainActivity.class)); finish();&#125; 打开LoginPresenter.java12345public interface LoginPresenter &#123; void validateCredentials(String username, String password); void onDestroy();&#125; 可以看到定义了两个接口,其中validateCredentials接口是用来验证用户名和密码是否通过验证的在LoginActivity中也有实现1234@Override public void onClick(View v) &#123; presenter.validateCredentials(username.getText().toString(), password.getText().toString());&#125; 看到这里, 我们可以总结出LoginActivity没有做任何逻辑相关的事情,而是在做界面显示相关和界面跳转的事情, 就连验证帐号的逻辑都是交给LoginPresenterImpl类的 那么现在顺藤摸瓜,打开LoginPresenterImpl.java文件1234567891011121314public class LoginPresenterImpl implements LoginPresenter, LoginInteractor.OnLoginFinishedListener &#123; private LoginView loginView; private LoginInteractor loginInteractor; public LoginPresenterImpl(LoginView loginView) &#123; this.loginView = loginView; this.loginInteractor = new LoginInteractorImpl(); &#125; //其他方法的实现 ...&#125; 我们可以看到该类实现了LoginPresenter和LoginInteractor.OnLoginFinishedListener的接口, 并且在构造方法的参数为LoginView, 那么问题来了, 为什么要传递LoginView类型的参数呢? 我们刚才也看到了,在LoginView中定义了几个接口, 而在LoginActivity中有对这几个接口的实现, 所以传递这个参数, 是有利于LoginPresenterImpl类调用LoginActivity的实现方法, 用于界面上的显示, 这就达到了逻辑代码和显示代码的分离 好了,现在来看看是怎么实现LoginPresenter中的validateCredentials接口的吧12345678@Override public void validateCredentials(String username, String password) &#123; if (loginView != null) &#123; loginView.showProgress(); &#125; loginInteractor.login(username, password, this);&#125; 看到这里,有同学该有疑问了,为什么在这个方法里我没看到实现帐号验证的具体逻辑呢? 没错,这里不应该有帐号验证的具体逻辑代码,因为LoginPresenterImpl类充当的是任命者或者称中介者的身份, 中介者只负责联系界面类和具体实现逻辑代码的类,如果还不能理解,就想想房地产中介吧, 他们只负责联系买房者和卖房者, 其他的事都不管(抱歉, 我没有鄙视或看不起房地产中介人员的意思, 这里只是做个举例, 在此说声对不起). 我们看到代码中, 把接收到的username和password参数传递给了一个login方法, 该方法在LoginInteractor文件中, 我们再打开LoginInteractor.java文件12345678910111213public interface LoginInteractor &#123; interface OnLoginFinishedListener &#123; void onUsernameError(); void onPasswordError(); void onSuccess(); &#125; void login(String username, String password, OnLoginFinishedListener listener);&#125; 可以定义了一个login接口和一个OnLoginFinishedListener接口类, 返回LoginPresenterImpl.java文件可以很容易看到OnLoginFinishedListener接口类中接口的实现12345678910111213141516171819@Override public void onUsernameError() &#123; if (loginView != null) &#123; loginView.setUsernameError(); loginView.hideProgress(); &#125;&#125;@Override public void onPasswordError() &#123; if (loginView != null) &#123; loginView.setPasswordError(); loginView.hideProgress(); &#125;&#125;@Override public void onSuccess() &#123; if (loginView != null) &#123; loginView.navigateToHome(); &#125;&#125; 在这些接口的实现中同样只是调用LoginView中的接口,并没有具体的逻辑操作代码 在该类的构造方法中我们会发现, 这里实例化了一个LoginInteractorImpl对象, 我们现在打开LoginInteractorImpl.java文件1234567891011121314151617181920212223242526public class LoginInteractorImpl implements LoginInteractor &#123; @Override public void login(final String username, final String password, final OnLoginFinishedListener listener) &#123; // Mock login. I&apos;m creating a handler to delay the answer a couple of seconds new Handler().postDelayed(new Runnable() &#123; @Override public void run() &#123; boolean error = false; if (TextUtils.isEmpty(username))&#123; listener.onUsernameError(); error = true; &#125; if (TextUtils.isEmpty(password))&#123; listener.onPasswordError(); error = true; &#125; if (!error)&#123; listener.onSuccess(); &#125; &#125; &#125;, 2000); &#125;&#125; 我们可以看到该类实现了LoginInteractor中的login接口, 并且在login方法中进行了具体的逻辑处理, 如果验证通过, 调用onSuccess接口 好了,整个登录流程讲完了,最后我们再来梳理一下整个流程: 在LoginActivity中,通过LoginPresenter接口类中的validateCredentials接口,把username和password传递给LoginPresenter的实现类LoginPresenterImpl LoginPresenterImpl类再通过LoginInteractor接口类中的login接口, 把username和password传递给LoginInteractor的实现类LoginInteractorImpl 在LoginInteractorImpl类中进行具体的逻辑处理, 如果验证通过,则调用LoginInteractor.OnLoginFinishedListener接口类中的onSuccess接口, 即调用了LoginPresenterImpl类中实现的onSuccess接口 LoginPresenterImpl类中实现的onSuccess接口中,调用了LoginView接口类中的navigateToHome接口,即调用了LoginActivity类中实现的navigateToHome接口 最后在navigateToHome接口中实现Activity的跳转,跳转到MainActivity 流程图如下: 总结在MVP开发模式中, Activity只负责界面的显示和跳转相关的操作, 具体的逻辑处理通过调用接口来传递给Presenter(中介者) 既不做界面显示的操作,也不做具体的逻辑处理操作, 具体的逻辑处理通过调用接口,让Interactor即交互类来完成 交互类的逻辑处理结果,通过调用Presenter中实现的接口, 再由Presenter要实现的接口中调用Activity中实现的接口来进行UI的显示或界面跳转 最后好了,安卓开发 MVP之初体验讲完了,写了那么多,希望大家能够看懂了,如果还有什么问题,可以问我Follow Me"},{"title":"【微表情心理学】耳朵的秘密","permalink":"http://zhongzilu.github.io/2016/05/10/【微表情心理学】耳朵的秘密/","text":"如果你仔细观察我们的耳朵，你会发现耳朵就像一个倒置的胎儿。他的头部朝下，臀部朝上。耳朵可以被看做事他人体的缩小版 耳朵大小某种程度上体现一个人的生命力和思想深度通常来说，一个人的耳朵越大，他就越充满激情和活力，他多半精力旺盛，但也很容易脾气暴躁，比如美国前总统比尔·克林顿。耳朵中等大小的人，多半思想冷静、理性而客观，比如法国影星苏菲·玛索。而小耳朵的人，多半具有很强的观察力，而且适应能力很强，对待事情也比较有耐心 耳朵反映一个人的性格特征大耳朵的人多半活力四射，行动力和执行力比较强，有个性，有思想 耳朵外形美观的人，内心相对平静，富有想象力，具有坚持不懈的品质和乐于竞争的精神 耳轮在起始处粗壮，而在走向中间的部位是剧烈变细的人多半比较顽固，敏感，情绪不稳定，容易消沉 耳朵外形粗糙，粗笨或过宽，过厚，此人往往比较麻木缺乏感情，思维不受控制，甚至有时还很野蛮，具有强烈的攻击性 中等大小的耳朵为正常耳朵，虽不具备丰富想象力和热情，但感情稳定，不易出现波动，而且做事更加理性，逻辑性思维很强，做事前喜欢深思熟虑，权衡再三，与人交往时不会无理争辩，而是做出让人信服的言论。总之此类人为人处世相对稳重，并且善于处理工作和生活之间的关系 小耳朵通常缺乏强烈的野心，自信心，想象力和创造性，但他们多半反应迅速，身体灵敏，并且具有极强的专注力和观察力。性情上，一般较为敏感，更容易闷闷不乐，郁郁寡欢，也常陷入悲观局面。但他们行事严谨，很少出现差错，往往也会取得令人骄傲的成绩 扯耳朵或摸耳垂在谈话中，很多人习惯做出扯耳朵或者摸耳垂的动作，通常这种动作表示他们试图打断对方说话。 摸耳垂的动作是一种自我触摸，自我安慰的行为。通常当人们对谈话内容不感兴趣而产生乏味，无趣的情绪甚至对内容反感时会出现此举动。一方面是想要打断对方的潜意识，另一方面是借此来安抚自己消除内心的浮躁和不安。 当人们紧张、内心焦虑不安、说谎、表示反对意见时也会有此举动 咬嘴唇或隐藏嘴唇出现此举通常是由于出现某种压力或紧张情绪。这是一种消极情绪 突然收拢嘴唇或嘟起嘴，如果在谈话时出现此举动，通常说明此人对所讲话的内容在心理上出现了反对意见或是不完全认可的态度，此时他正在思考怎么样转换正在谈论的话题或者是准备提出自己的不同意见 作者：zhongzilu"}]}